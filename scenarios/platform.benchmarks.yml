# Examples:
# --config platform.benchmarks.yml --scenario json --profile aspnet-citrine-lin

imports:
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Wrk/wrk.yml
  - https://raw.githubusercontent.com/dotnet/crank/main/src/Microsoft.Crank.Jobs.Bombardier/bombardier.yml
  - https://github.com/aspnet/Benchmarks/blob/main/scenarios/aspnet.profiles.yml?raw=true

variables:
  serverPort: 5000

jobs:
  platformbenchmarks:
    source:
      repository: https://github.com/aspnet/benchmarks.git
      branchOrCommit: sebros/static
      project: src/BenchmarksApps/TechEmpower/PlatformBenchmarks/PlatformBenchmarks.csproj
    readyStateText: Application started.
    framework: net7.0
    environmentVariables:
      database: PostgreSQL
      # [SuppressMessage("Microsoft.Security", "CS002:SecretInNextLine", Justification="Development password, not confidential")]
      connectionstring: Server={{databaseServer}};Database=hello_world;User Id=benchmarkdbuser;Password=benchmarkdbpass;Maximum Pool Size=18;Enlist=false;Max Auto Prepare=4;Multiplexing=true;Write Coalescing Buffer Threshold Bytes=1000
  
  postgresql:
    source:
      repository: https://github.com/TechEmpower/FrameworkBenchmarks.git
      branchOrCommit: master
      dockerFile: toolset/databases/postgres/postgres.dockerfile
      dockerImageName: postgres_te
      dockerContextDirectory: toolset/databases/postgres
    readyStateText: ready to accept connections
    noClean: true

  nginxproxy:
    source:
      Repository: https://github.com/aspnet/benchmarks.git
      BranchOrCommit: sebros/jsonstatic
      DockerFile: docker/nginx/nginx.dockerfile
      DockerImageName: nginx-reverseproxy
      DockerContextDirectory: docker/nginx
    environmentVariables:
        DOWNSTREAM_SCHEME: '{{downstreamScheme}}'
        DOWNSTREAM_ADDRESS: '{{downstreamAddress}}'
        DOWNSTREAM_PORT: '{{downstreamPort}}'
        WORKER_PROCESSES: '{{cores}}'
    buildArguments: 
      - SERVER_SCHEME=http
      - SERVER_PROTOCOL=json
    port: 8080

scenarios:
  plaintext:
    application:
      job: platformbenchmarks
    load:
      job: wrk
      variables:
        presetHeaders: plaintext
        path: /plaintext
        pipeline: 16
        connections: 1024

  json:
    application:
      job: platformbenchmarks
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        connections: 512
        serverPort: 8080

  json_static:
    application:
      job: platformbenchmarks
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /static
        connections: 512
        threads: 19

  json_nginx:
    application:
      job: nginxproxy
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /json
        connections: 512
        threads: 19

  fortunes:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments: 
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes
        connections: 512

  fortunes_dapper:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments:
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes/dapper
        connections: 512

  fortunes_ef:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments:
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: html
        path: /fortunes/ef
        connections: 512

  single_query:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments: 
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /db
        connections: 512

  multiple_queries:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments: 
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /queries/20
        connections: 512
  
  caching:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments: 
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /cached-worlds/100
        connections: 256

  updates:
    db:
      job: postgresql
    application:
      job: platformbenchmarks
      buildArguments: 
        - "/p:IsDatabase=true"
    load:
      job: wrk
      variables:
        presetHeaders: json
        path: /updates/20
        connections: 512
